#!/bin/bash

#
# note: TERM is typically set by Konsole via environment
#

#
# detect cygwin
#
cygwin=false;
case "`uname`" in
  CYGWIN*) cygwin=true;
    ;;
esac

#
# environment
#
export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/bin/X11:

#
# aliases
#
alias m='more ';
alias mm='less -X -F -e ';
alias als='ls --color=always '; # always colored ls
alias pls='ls --color=never '; # never colored ls
alias l='als -lF ';
alias lh='als -lh ';
alias ll='als -lAF ';
alias lm='l | m ';
alias llm='ll | m '
alias lsd='als -lAd */ '; # list only directories
alias ltr='l -tr'; # list in reverse order of creation/modified time
alias lltr='als -lAFtr'; # list in reverse order of creation/modified time
alias g='grep ';
alias md='mkdir ';
alias rd='rmdir ';
alias ..='cd .. ';
alias ...='cd ../..;pwd ';
alias ....='cd ../../..;pwd ';
alias .....='cd ../../../..;pwd ';
alias rm='rm -i ';
alias h='history ';
alias j='jobs ';
alias d='dirs -l -p -v ';

if $cygwin; then
    :
else
    alias acs='apt-cache search ';
    alias acw='apt-cache show ';

    alias td='tree -d ';
    alias td2='td -L 2 ';
    alias td3='td -L 3 ';

    alias bls='byobu list-sessions';
    alias bat='byobu attach-session -t ';
    alias bns='byobu new-session -s ';
fi

HISTCONTROL=ignoreboth;
HISTIGNORE=l:ll:h:rmj:lm:llm:ls:lsa:lsd:ltr:d:m

shopt -s no_empty_cmd_completion

#
# functions
#
function -() # handy shortcut to return to previous current directory
{
    cd -;
}

function /()
{
    cd /;
}

#
# make numbered backups
#
function cpn() {
    touch .normj;
    src="$1";
    dst=".${src}.wip";
    cp --backup=numbered "$src" "$dst";
    find . -name "${dst}*" -printf "%T+\t%p\n" | sort | tail -2 | sort -r;
}

#
# list numbered backups
#
function lln() {
    src="$1";
    dst=".${src}.wip";
    find . -name "${dst}*" -printf "%T+\t%p\n" | sort | tail -2 | sort -r;
}

function prompt {
    msg="$1";

    read -p "$msg? [Y/n]"

    if [ -z "$REPLY" -o "$REPLY" == "y" -o "$REPLY" == "Y" ]; then
        return 0;
    else
        return 1;
    fi
}

#
# removes emacs backup files
#
function rmj() {
    startdir="${1:-.}";

    if [ ! -d "$startdir" ]; then
        echo "Non-existant dir";
        return 0;
    fi

    if [ -f "$startdir/.normj" ]; then
        echo "Found .normj. Exiting.";
        return 0;
    fi

    findcmd='find "$startdir" \( -name \*~ -o -name .\*~ -o -name \#*\#  -o -name .\#* -o -name \*.pyc \)';

    retval=$(eval "$findcmd");
    if [ -z "$retval" ]; then
        echo "${1:-$(pwd)}/* is clean";
        return 0;
    else
        echo "$retval";
    fi

    if ! prompt "Descend and delete"; then
        return 0;
    fi

    findcmd="$findcmd -exec rm {} \;";
    eval "$findcmd";
}

# git branch
function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(* \1)/'
}

function xfill {
    TERMWIDTH=${COLUMNS}
    promptsize=$(echo -n "{00:00:00}[$(pwd)] " | wc -c | tr -d " ")

    branchsize=`git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(* \1)/' | wc -c`

    fillsize=$((${TERMWIDTH}-${promptsize}-${branchsize}))
    fill=""
    while [ "$fillsize" -gt "0" ]
    do
        fill="${fill}="
        fillsize=$((${fillsize}-1))
    done

    if [ "$fillsize" -lt "0" ]
    then
        cut=$((3-${fillsize}))
        newPWD="...$(echo -n $PWD | sed -e "s/\(^.\{$cut\}\)\(.*\)/\2/")"
    fi

    echo -n $fill
}

#
# Vanilla prompt
#
function vp()
{
    if [ "$UID" = 0 ];then
        PS1="#";
    else
        PS1="$";
    fi
}

#
# ergo prompt
#
function ep()
{
    # verbose command prompt off
    set +v

    # color codes
    clr_green="\[\033[32m\]";
    clr_white="\[\033[0m\]";
    clr_blue="\[\033[34m\]";
    clr_lightblue="\[\033[1;34m\]";
    clr_red="\[\033[31m\]";
    clr_lightgray="\[\033[0;37m\]";
    clr_purple="\[\033[0;35m\]";

    # ergo prompt variables / colors
    clr_path=$clr_green;
    clr_bg=$clr_white;
    clr_host=$clr_red;
    clr_bar=$clr_lightgray;
    clr_branch=$clr_purple;
    clr_user=$clr_lightblue;
    clr_dir=$clr_lightblue;


    #
    # ergo xterm prompt (black text on white background)
    #
    if [ -n ${xterm#$TERM} ]; then
        clr_user=$clr_blue;
        clr_dir=$clr_blue;
    fi

    #
    # ergo linux prompt (white text on black background)
    #
    if [ "$TERM" == 'linux' ]; then
        clr_user=$clr_lightblue;
        clr_dir=$clr_lightblue;
    fi

    PS1="{\t}$clr_path[\$(pwd)]$clr_bg \$(xfill)$clr_branch\$(parse_git_branch)$clr_bg\n$clr_user\u$clr_bg@$clr_host\h$clr_bg$clr_dir \W $clr_bg\$ "

    #################################################################
    # bash prompt color codes

    #"\[\033[0;30m\]" # Black
    #"\[\033[1;30m\]" # Dark Gray
    #"\[\033[0;31m\]" # Red
    #"\[\033[1;31m\]" # Light Red
    #"\[\033[0;32m\]" # Green
    #"\[\033[1;32m\]" # Light Green
    #"\[\033[0;33m\]" # Brown
    #"\[\033[1;33m\]" # Yellow
    #"\[\033[0;34m\]" # Blue
    #"\[\033[1;34m\]" # Light Blue
    #"\[\033[0;35m\]" # Purple
    #"\[\033[1;35m\]" # Light Purple
    #"\[\033[0;36m\]" # Cyan
    #"\[\033[1;36m\]" # Light
    #"\[\033[0;37m\]" # Light Gray
    #"\[\033[1;37m\]" # White
    #"\[\033[0m\]"    # Neutral

    # Octal listing of colors
    #Black 0;30      Dark Gray 1;30
    #Blue 0;34       Light Blue 1;34
    #Green 0;32      Light Green 1;32
    #Cyan 0;36       Light Cyan 1;36
    #Red 0;31        Light Red 1;31
    #Purple 0;35     Light Purple 1;35
    #Brown 0;33      Yellow 1;33
    #Light Gray 0;37 White 1;37
    #################################################################
} # end ergo prompt

#
# ergo dir colors
#
if [ -n ${xterm#$TERM} ]; then
    eval "`dircolors --sh ~/.ergo/.dir_colors_xterm`"
fi

if [ "$TERM" = "linux" ]; then
    eval "`dircolors --sh ~/.ergo/.dir_colors_linux`"
fi

#
# use the ergo prompt
#
ep;

#
# cygwin customizations
#
if $cygwin; then
    #
    # emacs
    #
    function e()
    {
        /cygdrive/c/utils/emacs/bin/runemacs.exe `cygpath -w $1`;
    }


    #
    # cdargs
    #
    . /usr/share/cdargs/cdargs-lib.sh
    . /usr/share/cdargs/cdargs-alias.sh
    . /usr/share/cdargs/cdargs-bash-completion.sh

    #
    # Launch Microsoft Word
    #
    function ww()
    {
        /cygdrive/c/Program\ Files/Microsoft\ Office/OFFICE11/WINWORD.EXE "$1" &
    }

    #
    # Launch Microsoft Excel
    #
    function xl()
    {
        /cygdrive/c/Program\ Files/Microsoft\ Office/OFFICE11/EXCEL.EXE "$1" &
    }

    #
    # Launch Windows Explorer in the current directory
    #
    function eh()
    {
        explorer /e, `pwd | cygpath -w -f -` &
    }
else # non-cygwin customizations
    #
    # emacs
    #
    function e()
    {
    # if terminal string contains xterm prefix
        if [ -n ${xterm#$TERM} ]; then
            for file in $*
            do
                (emacs $file &)
            done
        elif [ "$TERM" = 'linux' ]; then
            (emacs $1;)
        fi
    }

    export EDITOR='/usr/bin/emacs -nw'
fi

function higrep() {
    grep --color -E "$1|$2|$3|$4|$";
}

# include user customizations
if [ -f ~/.ergo/.customrc ]; then
    . ~/.ergo/.customrc
fi

# increase bash history file size
export HISTFILESIZE=10000
